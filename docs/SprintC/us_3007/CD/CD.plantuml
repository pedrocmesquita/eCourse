@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

enum AccessLevel << enumeration >> {
  + AccessLevel(): 
  + values(): AccessLevel[]
  + valueOf(String): AccessLevel
}
class Board {
  # Board(): 
  # Board(BoardTitle, int, int, SystemUser): 
  - numberRows: int
  - logs: Set<Log>
  - boardPermissions: Set<BoardPermission>
  - numberColumns: int
  + addPermission(BoardPermission): void
  + boardOwner(): SystemUser
  + toStringStatic(): String
  + toString(): String
  + addCell(BoardCell): void
  + addLog(Log): void
  + state(): BoardState
  + userHasPermission(SystemUser, AccessLevel): boolean
  + identity(): BoardTitle
  + equals(Object): boolean
  + getCellByRowColumn(int, int): BoardCell
  + addCells(Set<BoardCell>): void
  + sameAs(Object): boolean
  + hashCode(): int
   numberColumns: int
   boardCells: Set<BoardCell>
   logs: Set<Log>
   numberRows: int
   boardPermissions: Set<BoardPermission>
}
class BoardCell {
  + BoardCell(): 
  + BoardCell(BoardRow, BoardCol): 
  - row: BoardRow
  - column: BoardCol
  + hashCode(): int
  + sameAs(Object): boolean
  + equals(Object): boolean
  + toString(): String
  + identity(): Long
   row: BoardRow
   post: PostIt
   column: BoardCol
}
interface BoardCellRepository << interface >> {
  + getBoardCellByRowAndCol(BoardRow, BoardCol, PostIt): BoardCell
}
class BoardCol {
  # BoardCol(): 
  + BoardCol(String, String): 
  + value(): int
}
class BoardFactory {
  + BoardFactory(): 
  + create(String, int, int, Set<BoardCell>, SystemUser): Board
}
class BoardPermission {
  + BoardPermission(SystemUser, AccessLevel): 
  # BoardPermission(): 
  + equals(Object): boolean
  + identity(): Long
  + accessLevel(): AccessLevel
  + userWithPermission(): SystemUser
  + toString(): String
  + sameAs(Object): boolean
  + hashCode(): int
}
interface BoardPermissionRepository << interface >> {
  + findBySystemUserAccessLevel(SystemUser, AccessLevel): Iterable<BoardPermission>
}
interface BoardRepository << interface >> {
  + findByBoardPermission(BoardPermission): Board
  + getBoardByTitle(BoardTitle): Board
  + findByOwner(SystemUser): Iterable<Board>
}
class BoardRow {
  + BoardRow(String, String): 
  # BoardRow(): 
  + value(): int
}
enum BoardState << enumeration >> {
  + BoardState(): 
  + values(): BoardState[]
  + valueOf(String): BoardState
}
class BoardTitle {
  # BoardTitle(): 
  + BoardTitle(String): 
  + hashCode(): int
  + compareTo(BoardTitle): int
  + toString(): String
  + of(String): BoardTitle
  + equals(Object): boolean
   boardTitle: String
}
class ChangePostItController {
  + ChangePostItController(): 
  + changePostPosition(SystemUser, BoardTitle, int, int, int, int, PostIt): void
  + changePostContent(SystemUser, BoardTitle, int, int, Content, PostIt): PostIt
  + findBoards(SystemUser): Iterable<Board>
  + findBoardsByOwner(SystemUser): Iterable<Board>
  + findPostIts(Board): Iterable<PostIt>
  + findBoardsByUserPermission(SystemUser, AccessLevel): Iterable<Board>
   user: SystemUser
}
class ChangePostItUI {
  + ChangePostItUI(): 
  + headline(): String
  # doShow(): boolean
}
class Content {
  + Content(): 
  + createContentImage(String): Content
  + createContentText(String): Content
}
class JpaBoardCellRepository {
  + JpaBoardCellRepository(String): 
  + JpaBoardCellRepository(TransactionalContext): 
  + getBoardCellByRowAndCol(BoardRow, BoardCol, PostIt): BoardCell
}
class JpaBoardPermissionRepository {
  + JpaBoardPermissionRepository(String): 
  + JpaBoardPermissionRepository(TransactionalContext): 
  + findBySystemUserAccessLevel(SystemUser, AccessLevel): Iterable<BoardPermission>
}
class JpaBoardRepository {
  + JpaBoardRepository(TransactionalContext): 
  + JpaBoardRepository(String): 
  + findByBoardPermission(BoardPermission): Board
  + findByOwner(SystemUser): Iterable<Board>
  + getBoardByTitle(BoardTitle): Board
}
class Log {
  # Log(): 
  + Log(String): 
  + equals(Object): boolean
  + toString(): String
  + hashCode(): int
  + identity(): Long
  + sameAs(Object): boolean
}
class PostIt {
  + PostIt(Board, BoardCell, SystemUser, Content): 
  + PostIt(): 
  - content: Content
  - board: Board
  - cell: BoardCell
  - backup: PostIt
  - owner: SystemUser
  - saveBackup(): void
  + rollbackPost(): boolean
  + toString(): String
  + identity(): Long
  + sameAs(Object): boolean
  + relocate(BoardCell): boolean
  - replacePostWithBackup(): void
  + equals(Object): boolean
  + hashCode(): int
  + setContent(Content): boolean
   column: BoardCol
   row: BoardRow
   owner: SystemUser
   cell: BoardCell
   board: Board
   backup: PostIt
   content: Content
}
class PostItFactory {
  + PostItFactory(): 
  + create(Board, BoardCell, SystemUser, Content): PostIt
}
interface PostItRepository << interface >> {
  + getPostItsByBoard(Board): Iterable<PostIt>
  + getPostItsByOwner(Board, SystemUser): Iterable<PostIt>
  + getPostItByBoardCell(BoardCell): PostIt
}

Board                         -[#595959,dashed]->  BoardCell                    : "«create»"
Board                        "1" *-[#595959,plain]-> "cells\n*" BoardCell                    
Board                        "1" *-[#595959,plain]-> "boardPermissions\n*" BoardPermission              
Board                        "1" *-[#595959,plain]-> "state\n1" BoardState                   
Board                        "1" *-[#595959,plain]-> "boardTitle\n1" BoardTitle                   
Board                        "1" *-[#595959,plain]-> "logs\n*" Log                          
Board                         -[#595959,dashed]->  Log                          : "«create»"
BoardCell                    "1" *-[#595959,plain]-> "column\n1" BoardCol                     
BoardCell                    "1" *-[#595959,plain]-> "row\n1" BoardRow                     
BoardCell                    "1" *-[#595959,plain]-> "postIt\n1" PostIt                       
BoardFactory                  -[#595959,dashed]->  Board                        : "«create»"
BoardPermission              "1" *-[#595959,plain]-> "accessLevel\n1" AccessLevel                  
ChangePostItController       "1" *-[#595959,plain]-> "cellRepo\n1" BoardCellRepository          
ChangePostItController        -[#595959,dashed]->  BoardCol                     : "«create»"
ChangePostItController       "1" *-[#595959,plain]-> "repo1\n1" BoardPermissionRepository    
ChangePostItController       "1" *-[#595959,plain]-> "repo\n1" BoardRepository              
ChangePostItController        -[#595959,dashed]->  BoardRow                     : "«create»"
ChangePostItController        -[#595959,dashed]->  PostIt                       : "«create»"
ChangePostItController       "1" *-[#595959,plain]-> "repo2\n1" PostItRepository             
ChangePostItUI                -[#595959,dashed]->  ChangePostItController       : "«create»"
ChangePostItUI               "1" *-[#595959,plain]-> "theController\n1" ChangePostItController       
ChangePostItUI                -[#595959,dashed]->  Content                      : "«create»"
JpaBoardCellRepository        -[#008200,dashed]-^  BoardCellRepository          
JpaBoardPermissionRepository  -[#008200,dashed]-^  BoardPermissionRepository    
JpaBoardRepository            -[#008200,dashed]-^  BoardRepository              
Log                          "1" *-[#595959,plain]-> "id\n1" Board                        
PostIt                       "1" *-[#595959,plain]-> "board\n1" Board                        
PostIt                       "1" *-[#595959,plain]-> "cell\n1" BoardCell                    
PostIt                       "1" *-[#595959,plain]-> "content\n1" Content                      
PostIt                        -[#595959,dashed]->  Log                          : "«create»"
PostItFactory                 -[#595959,dashed]->  PostIt                       : "«create»"
@enduml
