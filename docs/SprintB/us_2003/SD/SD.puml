@startuml

participant Teacher as Actor
participant ListCourseExamsUI as UI <<presentation>>
participant SelectCourseWidget as SelectCourseWidget <<presentation>>

participant ListCourseExamsController as Controller
participant AuthenticationService as Autzh <<service>>
participant UserSession as UserSession <<session>>
participant PersistenceContext as Context <<persistence>>
participant RepositoryFactory as Factory <<factory>>
participant Course as Course <<domain>>
database TeachersInCourseRepository as TeacherCourseRepository <<repository>>
database TeacherUserRepository as TeacherRepository <<repository>>

Actor --> UI : asks to list exams of a course
activate UI
UI -> Controller : create()

UI -> Controller : listCourseExams()
activate Controller

Controller -> Autzh : create()
Controller -> Autzh : ensureAuthenticatedUserHasAnyOf(CourseRoles.TEACHER)
Autzh -> UserSession : create()

activate Autzh
Controller -> Autzh : session()
Autzh -> Controller : session
deactivate Autzh

Controller -> UserSession : authenticatedUser()
activate UserSession
UserSession -> Controller : user
deactivate UserSession

Controller -> Controller : create()
Controller -> Controller : listCourseExams()


Controller -> Context : repositories()

activate Context
Context -> Factory : create()
Context -> Controller : factory
deactivate Context

Controller -> Factory : getUserAcronym()

activate Factory
Factory -> TeacherRepository : getTeacherUserFromSystemUser(user)
activate TeacherRepository
TeacherRepository -> Factory : acronym
deactivate TeacherRepository
Factory -> Controller : acronym
deactivate Factory


Controller -> Factory : allCoursesTeacherIsAssigned()
activate Factory
Factory -> TeacherCourseRepository : findAllCoursesTeacherIsAssign(acronym)()
activate TeacherCourseRepository
TeacherCourseRepository -> Factory : courses
deactivate TeacherCourseRepository
Factory -> Controller : courses
deactivate Factory

Controller --> UI : listCourseExams
deactivate Controller

UI -> SelectCourseWidget : selectCourse()
activate SelectCourseWidget
SelectCourseWidget --> UI : selectedCourse
deactivate SelectCourseWidget

UI --> Controller : listCourseExams(selectedCourse)
activate Controller
Controller -> Course : listCourseExams = getExams()
activate Course
Course --> Controller : listCourseExams
deactivate Course
Controller --> UI : listCourseExams
deactivate Controller


UI -> Actor : show list of exams of chosen course
deactivate UI

@enduml