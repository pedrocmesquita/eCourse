@startuml
Actor Teacher as Actor
participant ListAssignCoursesUI as ListAssignCoursesUI <<presentation>>
participant ListTeacherCoursesController as ListTeacherCoursesController <<controller>>
participant TeacherUserRepository as TeacherUserRepository <<Repository>>
participant TeacherUser as TeacherUser <<domain>>
participant TeachersInCourseRepository as TeachersInCourseRepository <<Repository>>

Database database
Actor -> ListAssignCoursesUI : ask to see assigned courses
activate ListAssignCoursesUI
ListAssignCoursesUI -> ListTeacherCoursesController : findAllCoursesTeacherIsAssign
activate ListTeacherCoursesController
ListTeacherCoursesController -> ListTeacherCoursesController : getUserAcronym
activate ListTeacherCoursesController
ListTeacherCoursesController -> TeacherUserRepository : getTeacherUserFromSystemUser
activate TeacherUserRepository
TeacherUserRepository -> database : getTeacherUserFromSystemUser
activate database
database --> TeacherUserRepository
deactivate database
TeacherUserRepository --> ListTeacherCoursesController
deactivate TeacherUserRepository
ListTeacherCoursesController --> ListTeacherCoursesController
deactivate ListTeacherCoursesController
ListTeacherCoursesController -> TeacherUser : acronym
activate TeacherUser
TeacherUser -> TeacherUser : identity
activate TeacherUser
TeacherUser --> TeacherUser
deactivate TeacherUser
TeacherUser --> ListTeacherCoursesController
deactivate TeacherUser
ListTeacherCoursesController -> TeachersInCourseRepository : findAllCoursesTeacherIsAssign
activate TeachersInCourseRepository
TeachersInCourseRepository -> database : findAllCoursesTeacherIsAssign
activate database
database --> TeachersInCourseRepository
deactivate database
TeachersInCourseRepository --> ListTeacherCoursesController
deactivate TeachersInCourseRepository
ListTeacherCoursesController --> ListAssignCoursesUI
deactivate ListTeacherCoursesController
return shows assigned courses
@enduml