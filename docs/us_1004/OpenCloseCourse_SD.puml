@startuml
Actor Manager as Actor
participant OpenCloseCourseUI as OpenCloseCourseUI <<presentation>>
participant SelectCourseWidget as SelectCourseWidget <<presentation>>
participant OpenCloseCourseController as OpenCloseCourseController <<application>>
participant Course as Course <<domain>>

Actor -> OpenCloseCourseUI : ask to open/close course
activate OpenCloseCourseUI
OpenCloseCourseUI -> SelectCourseWidget : selectCourse
activate SelectCourseWidget
SelectCourseWidget --> OpenCloseCourseUI
deactivate SelectCourseWidget
OpenCloseCourseUI --> Actor : shows and ask to select a course
deactivate OpenCloseCourseUI
Actor -> OpenCloseCourseUI : selects a course
activate OpenCloseCourseUI
OpenCloseCourseUI -> OpenCloseCourseController : toggleOpenClose
activate OpenCloseCourseController
OpenCloseCourseController -> Course : toggleOpenClose
alt Open Course
activate Course
Course -> Course : setState
activate Course
deactivate Course
else Close Course
Course -> Course : checkActivity
activate Course
deactivate Course
Course -> Course : setState
activate Course
deactivate Course
end
Course --> OpenCloseCourseController
deactivate Course

OpenCloseCourseController --> OpenCloseCourseUI
deactivate OpenCloseCourseController
return informs operation success
@enduml