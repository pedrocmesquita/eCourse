@startuml
actor Manager as Actor
participant ScheduleClassUI as ScheduleClassUI <<presentation>>
participant ScheduleClassController as ScheduleClassController <<application>>
participant SchClass as SchClass <<domain>>
participant SchClass as SchClass <<domain>>
participant Instructor as Instructor <<domain>>
participant startTime as startTime <<domain>>
participant AuthorizationService as AuthorizationService <<auth>>
participant ClassBuilder as ClassBuilder <<domain>>
participant DomainRepository as DomainRepository <<repository>>


Actor -> ScheduleClassUI : ask to schedule a Class
activate ScheduleClassUI
ScheduleClassUI --> Actor : ask for class info\n(SchClass, instructor, start and end time)
deactivate ScheduleClassUI
Actor -> ScheduleClassUI : introduces data
activate ScheduleClassUI
ScheduleClassUI -> ScheduleClassController : scheduleClass
activate ScheduleClassController
ScheduleClassController -> AuthorizationService : ensureAuthenticatedUserHasAnyOf
activate AuthorizationService
AuthorizationService --> ScheduleClassController
deactivate AuthorizationService
ScheduleClassController -> ClassBuilder : withSchClass
activate ClassBuilder
create SchClass
ClassBuilder -> SchClass : new
activate SchClass
SchClass -> SchClass : setSchClass
activate SchClass
SchClass --> SchClass
deactivate SchClass
SchClass --> ClassBuilder
deactivate SchClass
ClassBuilder --> ScheduleClassController
deactivate ClassBuilder
ScheduleClassController -> ClassBuilder : withInstructor
activate ClassBuilder
create Instructor
ClassBuilder -> Instructor : new
activate Instructor
Instructor -> Instructor : setInstructor
activate Instructor
Instructor --> Instructor
deactivate Instructor
Instructor --> ClassBuilder
deactivate Instructor
ClassBuilder --> ScheduleClassController
deactivate ClassBuilder
opt
ScheduleClassController -> ClassBuilder : withstartTime
activate ClassBuilder
create startTime
ClassBuilder -> startTime : new
activate startTime
startTime -> startTime : setstartTime
activate startTime
startTime -> startTime : setendTime
activate startTime
startTime --> startTime
deactivate startTime
startTime -> startTime : setMaxEnroll
activate startTime
startTime --> startTime
deactivate startTime
startTime --> startTime
deactivate startTime
startTime --> ClassBuilder
deactivate startTime
ClassBuilder --> ScheduleClassController
deactivate ClassBuilder
end
ScheduleClassController -> ClassBuilder : build
activate ClassBuilder
create SchClass
ClassBuilder -> SchClass : new
activate SchClass
SchClass --> ClassBuilder
deactivate SchClass
ClassBuilder --> ScheduleClassController
deactivate ClassBuilder
ScheduleClassController -> DomainRepository : save
activate DomainRepository
database Database
DomainRepository -> Database : save
activate Database
Database --> DomainRepository
deactivate Database
DomainRepository --> ScheduleClassController
deactivate DomainRepository
ScheduleClassController --> ScheduleClassUI
deactivate ScheduleClassController
return informs operation success
@enduml