package eapli.ecourse.coursemanagement.domain;

import eapli.framework.domain.model.AggregateRoot;
import eapli.framework.domain.model.DomainEntities;
import eapli.framework.validations.Preconditions;

import javax.persistence.*;
import java.util.Date;

@Entity
public class Exam implements AggregateRoot<Name>
{
    
    /**
     * ORM primary key. Autogenerated value
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long examId;
    
    /**
     * Business ID
     */
    @Embedded
    private Name title;
    
    @Embedded
    private Description description;
    
    @Embedded
    private Date dateOpen;
    
    @Embedded
    private Date dateClose;
    
    @Enumerated(EnumType.STRING)
    private State state;
    
    protected Exam()
    {
        //ORM only
    }
    
    /**
     * Constructor
     */
    protected Exam(Name title, Description description, Date dateOpen, Date dateClose)
    {
        Preconditions.noneNull(title, description, dateOpen, dateClose);
        this.title = title;
        this.description = description;
        this.dateOpen = dateOpen;
        this.dateClose = dateClose;
        this.state = State.CLOSED;
    }
    
    public Name getTitle()
    {
        return identity();
    }
    
    public void setName(Name title)
    {
        this.title = title;
    }
    
    public Description getDescription()
    {
        return description;
    }
    
    public void setDescription(Description description)
    {
        this.description = description;
    }
    
    public Date getDateOpen()
    {
        return dateOpen;
    }
    
    public void setDateOpen(Date dateOpen)
    {
        this.dateOpen = dateOpen;
    }
    
    public Date getDateClose()
    {
        return dateClose;
    }
    
    public void setDateClose(Date dateClose)
    {
        this.dateClose = dateClose;
    }
    
    public State getState()
    {
        return state;
    }
    
    public void setState(State state)
    {
        this.state = state;
    }
    
    /**
     * Toggles course state between open and Close. Can only toggle to open if course has no activity
     */
    public void toggleOpenClose()
    {
        if (this.state.equals(State.CLOSED))
        {
            this.setState(State.OPEN);
        }
        else if (this.state.equals(State.OPEN) || this.state.equals(State.PROGRESS))
        {
            checkActivity();
            this.setState(State.CLOSED);
        }
        else
        {
            throw new IllegalStateException("Cannot open/close course that is in enrollment or progress");
        }
    }
    
    /**
     * checks if course as activity(schelude exams or extra classes).
     *
     * @throws IllegalStateException case course as activity
     */
    private void checkActivity() throws IllegalStateException
    {
        //todo check activity
    }
    
    /**
     * Toggles course state between open and enroll.
     */
    public void toggleOpenCloseEnroll()
    {
        if (this.state.equals(State.OPEN))
        {
            this.setState(State.ENROLL);
        }
        else if (this.state.equals(State.ENROLL))
        {
            this.setState(State.OPEN);
        }
        else
        {
            throw new IllegalStateException("Cannot open/close enrollment of a course that is closed or in progress");
        }
    }
    
    @Override
    public boolean equals(final Object o)
    {
        return DomainEntities.areEqual(this, o);
    }
    
    @Override
    public int hashCode()
    {
        return DomainEntities.hashCode(this);
    }
    
    @Override
    public boolean sameAs(final Object other)
    {
        if (! (other instanceof Exam))
        {
            return false;
        }
        
        final Exam that = (Exam) other;
        if (this == that)
        {
            return true;
        }
        
        return title.equals(that.title) && description.equals(that.description) &&
                dateOpen.equals(that.dateOpen) && dateClose.equals(that.dateClose) &&
                state.equals(that.state);
    }
    
    @Override
    public Name identity()
    {
        return this.title;
    }
    
}
